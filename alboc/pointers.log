	1: /* Program 'pointers'
	2: /* Program 'pointers'
	3:    ------------------
	4:    Tests various use of pointers.
	5: */
	6: 
	7: int LF;
	8: 
Parser:   <program>
Parser:     <type>
	9: int test1 ()
Parser:     </type>
Parser:     <var decl>
Parser:     </var decl>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
	10: {
	11:    int v;
Parser:       <func body>
Parser:         <type>
	12:    int *p1;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
	13:    int **p2;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
	14:    int ***p3;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
	15: 
	16:    p1 = &v;  p2 = &p1;  p3 = &p2; 
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <address>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </address>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <address>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </address>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <address>
Parser:                             <variable>
	17:    v = 17;  *p1 = *p1+1;  **p2 = *(*p2)+2;  ***p3 = *(*(*p3))+3;
Parser:                             </variable>
Parser:                           </address>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <prefix opr>
Parser:                         </prefix opr>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <prefix opr>
Parser:                         </prefix opr>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <prefix opr>
Parser:                                     </prefix opr>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <prefix opr>
Parser:                         </prefix opr>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <prefix opr>
Parser:                                     </prefix opr>
Parser:                                     <operand>
Parser:                                       <inner expr>
Parser:                                         <expression>
Parser:                                           <term>
Parser:                                             <factor>
Parser:                                               <primary>
Parser:                                                 <prefix opr>
Parser:                                                 </prefix opr>
Parser:                                                 <operand>
Parser:                                                   <variable>
Parser:                                                   </variable>
Parser:                                                 </operand>
Parser:                                               </primary>
Parser:                                             </factor>
Parser:                                           </term>
Parser:                                         </expression>
Parser:                                       </inner expr>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
	18:    putchar('v');  putchar('=');  putint(*p1);  putchar('=');
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <prefix opr>
Parser:                           </prefix opr>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
	19:    putint(*(*p2));  putchar('=');  putint(*(*(*(p3))));  putchar(LF);
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <prefix opr>
Parser:                           </prefix opr>
Parser:                           <operand>
Parser:                             <inner expr>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <prefix opr>
Parser:                                       </prefix opr>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </inner expr>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <prefix opr>
Parser:                           </prefix opr>
Parser:                           <operand>
Parser:                             <inner expr>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <prefix opr>
Parser:                                       </prefix opr>
Parser:                                       <operand>
Parser:                                         <inner expr>
Parser:                                           <expression>
Parser:                                             <term>
Parser:                                               <factor>
Parser:                                                 <primary>
Parser:                                                   <prefix opr>
Parser:                                                   </prefix opr>
Parser:                                                   <operand>
Parser:                                                     <inner expr>
Parser:                                                       <expression>
Parser:                                                         <term>
Parser:                                                           <factor>
Parser:                                                             <primary>
Parser:                                                               <operand>
Parser:                                                                 <variable>
Parser:                                                                 </variable>
Parser:                                                               </operand>
Parser:                                                             </primary>
Parser:                                                           </factor>
Parser:                                                         </term>
Parser:                                                       </expression>
Parser:                                                     </inner expr>
Parser:                                                   </operand>
Parser:                                                 </primary>
Parser:                                               </factor>
Parser:                                             </term>
Parser:                                           </expression>
Parser:                                         </inner expr>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </inner expr>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
	20: }
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	21: 
	22: int test2()
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
	23: {
	24:    int a[10];
Parser:       <func body>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	25:    int* a0;  int* a4;
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
	26: 
	27:    a[0] = -2;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <prefix opr>
	28:    a0 = a;  
Parser:                         </prefix opr>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
	29:    a4 = &a[4];  
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <address>
Parser:                             <variable>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
	30:    a4[-4] = a4[-4]-1;
Parser:                             </variable>
Parser:                           </address>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <prefix opr>
Parser:                             </prefix opr>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <prefix opr>
Parser:                                     </prefix opr>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
	31:    putchar('a');  putchar('0');  putchar('=');  putint(*a0);  putchar(LF);
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <prefix opr>
Parser:                           </prefix opr>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
	32: }
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	33: 
	34: int main ()
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
	35: {
	36:    LF = 10;  /* Line feed character */
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
	37:    test1();  
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
	38:    test2();  
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
	39:    exit(0);
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
	40: }
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:   </program>
Tree:     int LF;
Tree:     int test1(){
Tree:       int v;
Tree:       int* p1;
Tree:       int** p2;
Tree:       int*** p3;
Tree:       p1=&v;
Tree:       p2=&p1;
Tree:       p3=&p2;
Tree:       v=17;
Tree:       *p1=*p1 + 1;
Tree:       **p2=*(*p2) + 2;
Tree:       ***p3=*(*(*p3)) + 3;
Tree:       putchar(118);
Tree:       putchar(61);
Tree:       putint(*p1);
Tree:       putchar(61);
Tree:       putint(*(*p2));
Tree:       putchar(61);
Tree:       putint(*(*(*(p3))));
Tree:       putchar(LF);
Tree:       
Tree:     }
Tree:     int test2(){
Tree:       int a;
Tree:       int* a0;
Tree:       int* a4;
Tree:       a[0]=-2;
Tree:       a0=a;
Tree:       a4=&a[4];
Tree:       a4[-4]=a4[-4] - 1;
Tree:       putchar(97);
Tree:       putchar(48);
Tree:       putchar(61);
Tree:       putint(*a0);
Tree:       putchar(LF);
Tree:       
Tree:     }
Tree:     int main(){
Tree:       LF=10;
Tree:       test1();
Tree:       test2();
Tree:       exit(0);
Tree:       
Tree:     }
