	1: /* Test program 'easter'
	2: /* Test program 'easter'
	3:                 ========
	4:    Computes Easter Sunday for the years 2010-2020. 
	5: */
	6: 
	7: int mod (int x, int y)
Parser:   <program>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
	8: { /* Computes x%y */
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
	9:   return x - (x/y*y);
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <return-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                   <term opr>
Parser:                   </term opr>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                   <factor opr>
Parser:                                   </factor opr>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                     <factor opr>
Parser:                                     </factor opr>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
	10: }
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </factor>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
	11: 
	12: int easter (int y)
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </term>
Parser:               </expression>
Parser:             </return-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
	13: {
Parser:       </type>
Parser:       <param decl>
	14:   int a;  int b;  int c;  int d;  int e;  int f;
Parser:       </param decl>
Parser:       <func body>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
	15:   int g;  int h;  int i;  int k;  int l;  int m;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	16: 
Parser:         </var decl>
Parser:         <type>
	17:   int month;  /* The date of Easter Sunday */
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	18:   int m_name[5];
Parser:         </var decl>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	19:   int day;
	20: 
Parser:         </var decl>
Parser:         <type>
	21:   int ix;
Parser:         </type>
Parser:         <var decl>
	22: 
Parser:         </var decl>
Parser:         <type>
	23:   a = mod(y,19);
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	24:   b = y / 100;
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	25:   c = mod(y,100);
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	26:   d = b / 4;
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	27:   e = mod(b,4);
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	28:   f = (b+8) / 25;
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                                 <term opr>
Parser:                                 </term opr>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	29:   g = (b-f+1) / 3;
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                                 <term opr>
Parser:                                 </term opr>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                   <term opr>
Parser:                                   </term opr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <number>
Parser:                                           </number>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </term>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	30:   h = mod(19*a+b-d-g+15,30);
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                     <factor opr>
Parser:                                     </factor opr>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </factor>
Parser:                                   <term opr>
Parser:                                   </term opr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                     <term opr>
Parser:                                     </term opr>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                       <term opr>
Parser:                                       </term opr>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                         <term opr>
Parser:                                         </term opr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <primary>
Parser:                                               <operand>
Parser:                                                 <number>
Parser:                                                 </number>
Parser:                                               </operand>
Parser:                                             </primary>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </term>
Parser:                                     </term>
Parser:                                   </term>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	31:   i = c / 4;
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	32:   k = mod(c,4);
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	33:   l = mod(32+2*e+2*i-h-k,7);
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                   <term opr>
Parser:                                   </term opr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <number>
Parser:                                           </number>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                       <factor opr>
Parser:                                       </factor opr>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </factor>
Parser:                                     <term opr>
Parser:                                     </term opr>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <number>
Parser:                                             </number>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                         <factor opr>
Parser:                                         </factor opr>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </factor>
Parser:                                       <term opr>
Parser:                                       </term opr>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                         <term opr>
Parser:                                         </term opr>
Parser:                                         <term>
Parser:                                           <factor>
Parser:                                             <primary>
Parser:                                               <operand>
Parser:                                                 <variable>
Parser:                                                 </variable>
Parser:                                               </operand>
Parser:                                             </primary>
Parser:                                           </factor>
Parser:                                         </term>
Parser:                                       </term>
Parser:                                     </term>
Parser:                                   </term>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	34:   m = (a+11*h+22*l) / 451;
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                                 <term opr>
Parser:                                 </term opr>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                     <factor opr>
Parser:                                     </factor opr>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </factor>
Parser:                                   <term opr>
Parser:                                   </term opr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <number>
Parser:                                           </number>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                       <factor opr>
Parser:                                       </factor opr>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </term>
Parser:                               </term>
Parser:                             </expression>
	35: 
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	36:   month = (h+l-(7*m)+114) / 31;
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <inner expr>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <variable>
Parser:                                       </variable>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                                 <term opr>
Parser:                                 </term opr>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                   <term opr>
Parser:                                   </term opr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <inner expr>
Parser:                                             <expression>
Parser:                                               <term>
Parser:                                                 <factor>
Parser:                                                   <primary>
Parser:                                                     <operand>
Parser:                                                       <number>
Parser:                                                       </number>
Parser:                                                     </operand>
Parser:                                                   </primary>
Parser:                                                   <factor opr>
Parser:                                                   </factor opr>
Parser:                                                   <factor>
Parser:                                                     <primary>
Parser:                                                       <operand>
Parser:                                                         <variable>
Parser:                                                         </variable>
Parser:                                                       </operand>
Parser:                                                     </primary>
Parser:                                                   </factor>
Parser:                                                 </factor>
Parser:                                               </term>
Parser:                                             </expression>
Parser:                                           </inner expr>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                     <term opr>
Parser:                                     </term opr>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <number>
Parser:                                             </number>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </term>
Parser:                                 </term>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </inner expr>
Parser:                         </operand>
Parser:                       </primary>
Parser:                       <factor opr>
	37:   day = mod(h+l-(7*m)+114,31) + 1;
Parser:                       </factor opr>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                   <term opr>
Parser:                                   </term opr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                     <term opr>
Parser:                                     </term opr>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <inner expr>
Parser:                                               <expression>
Parser:                                                 <term>
Parser:                                                   <factor>
Parser:                                                     <primary>
Parser:                                                       <operand>
Parser:                                                         <number>
Parser:                                                         </number>
Parser:                                                       </operand>
Parser:                                                     </primary>
Parser:                                                     <factor opr>
Parser:                                                     </factor opr>
Parser:                                                     <factor>
Parser:                                                       <primary>
Parser:                                                         <operand>
Parser:                                                           <variable>
Parser:                                                           </variable>
Parser:                                                         </operand>
Parser:                                                       </primary>
Parser:                                                     </factor>
Parser:                                                   </factor>
Parser:                                                 </term>
Parser:                                               </expression>
Parser:                                             </inner expr>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                       <term opr>
Parser:                                       </term opr>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <number>
Parser:                                               </number>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </term>
Parser:                                   </term>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
	38:   if (month == 3) {
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <if-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel opr>
Parser:                 </rel opr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <number>
	39:     m_name[0] = 'M';  m_name[1] = 'a';  m_name[2] = 'r';
Parser:                         </number>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </lhs-variable>
	40:     m_name[3] = 'c';  m_name[4] = 'h';
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </lhs-variable>
	41:   } else {
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
	42:     m_name[0] = 'A';  m_name[1] = 'p';  m_name[2] = 'r';
Parser:               </statm list>
Parser:               <else-part>
Parser:                 <statm list>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <lhs-variable>
Parser:                           <variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </variable>
Parser:                         </lhs-variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign-statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <lhs-variable>
Parser:                           <variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </variable>
Parser:                         </lhs-variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign-statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <lhs-variable>
Parser:                           <variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </variable>
Parser:                         </lhs-variable>
	43:     m_name[3] = 'i';  m_name[4] = 'l';
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign-statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <lhs-variable>
Parser:                           <variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </variable>
Parser:                         </lhs-variable>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
Parser:                     </assign-statm>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign-statm>
Parser:                       <assignment>
Parser:                         <lhs-variable>
Parser:                           <variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </variable>
Parser:                         </lhs-variable>
	44:   }
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	45: 
	46:   /* Print the answer: */
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </assignment>
	47:   putint(day);  putchar(' ');
Parser:                     </assign-statm>
Parser:                   </statement>
Parser:                 </statm list>
Parser:               </else-part>
Parser:             </if-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
	48:   for (ix = 0;  ix < 5;  ix = ix+1) { putchar(m_name[ix]); }
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <for-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel opr>
Parser:                 </rel opr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
Parser:                                     <expression>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </expression>
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
	49: }
Parser:                       </expr list>
Parser:                     </function call>
	50: 
	51: int main () 
Parser:                   </call-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </for-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
	52: {
	53:   int y;
Parser:       <func body>
	54: 
Parser:         <type>
	55:   for (y = 2010;  y <= 2020;  y = y+1) {
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <for-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel opr>
Parser:                 </rel opr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <number>
Parser:                         </number>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
	56:     easter(y);  putchar(' ');
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	57:     putint(y);  putchar(10);
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	58:   }   
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
	59: }
Parser:                   </call-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </for-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:   </program>
Tree:     int mod(int x, int y){
Tree:       return x - (x / y * y);
Tree:     }
Tree:     int easter(int y){
Tree:       int a;
Tree:       int b;
Tree:       int c;
Tree:       int d;
Tree:       int e;
Tree:       int f;
Tree:       int g;
Tree:       int h;
Tree:       int i;
Tree:       int k;
Tree:       int l;
Tree:       int m;
Tree:       int month;
Tree:       int m_name;
Tree:       int day;
Tree:       int ix;
Tree:       a=mod(y, 19);
Tree:       b=y / 100;
Tree:       c=mod(y, 100);
Tree:       d=b / 4;
Tree:       e=mod(b, 4);
Tree:       f=(b + 8) / 25;
Tree:       g=(b - f + 1) / 3;
Tree:       h=mod(19 * a + b - d - g + 15, 30);
Tree:       i=c / 4;
Tree:       k=mod(c, 4);
Tree:       l=mod(32 + 2 * e + 2 * i - h - k, 7);
Tree:       m=(a + 11 * h + 22 * l) / 451;
Tree:       month=(h + l - (7 * m) + 114) / 31;
Tree:       day=mod(h + l - (7 * m) + 114, 31) + 1;
Tree:       if (month == 3) {
Tree:         m_name[0]=77;
Tree:         m_name[1]=97;
Tree:         m_name[2]=114;
Tree:         m_name[3]=99;
Tree:         m_name[4]=104;
Tree:         }
Tree:       else {
Tree:         m_name[0]=65;
Tree:         m_name[1]=112;
Tree:         m_name[2]=114;
Tree:         m_name[3]=105;
Tree:         m_name[4]=108;
Tree:         
Tree:         }
Tree:       putint(day);
Tree:       putchar(32);
Tree:       for (ix=0;ix < 5}ix=ix + 1) {
Tree:         putchar(m_name[ix]);
Tree:       }
Tree:       
Tree:     }
Tree:     int main(){
Tree:       int y;
Tree:       for (y=2010;y <= 2020}y=y + 1) {
Tree:         easter(y);
Tree:         putchar(32);
Tree:         putint(y);
Tree:         putchar(10);
Tree:       }
Tree:       
Tree:     }
