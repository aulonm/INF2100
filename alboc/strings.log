	1: /* Program 'strings'
	2: /* Program 'strings'
	3:    -----------------
	4:    Implements C-like text strings, and demonstrates their use
	5:    with a palindrome checker.
	6: */
	7: 
	8: int true;  int false;  /* Boolean values */
Parser:   <program>
Parser:     <type>
Parser:     </type>
Parser:     <var decl>
Parser:     </var decl>
Parser:     <type>
Parser:     </type>
Parser:     <var decl>
	9: int LF;                /* Line feed character */
Parser:     </var decl>
Parser:     <type>
Parser:     </type>
Parser:     <var decl>
	10: 
	11: /* Reading strings: */
	12: 
	13: int my_gets (int *s)
Parser:     </var decl>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
	14: {
Parser:       </type>
Parser:       <param decl>
	15:    int i;  int c;
Parser:       </param decl>
Parser:       <func body>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	16: 
Parser:         </var decl>
Parser:         <type>
	17:    i = 0;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
	18:    while (true) {
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <while-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
	19:       c = getchar();
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <function call>
	20:       if (c == LF) {
Parser:                                   <expr list>
Parser:                                   </expr list>
Parser:                                 </function call>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <if-statm>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
	21: 	  s[i] = 0;   return 0;
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <assign-statm>
Parser:                           <assignment>
Parser:                             <lhs-variable>
Parser:                               <variable>
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </variable>
Parser:                             </lhs-variable>
Parser:                             <expression>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <primary>
Parser:                                     <operand>
Parser:                                       <number>
Parser:                                       </number>
Parser:                                     </operand>
Parser:                                   </primary>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </expression>
Parser:                           </assignment>
Parser:                         </assign-statm>
Parser:                       </statement>
Parser:                       <statement>
Parser:                         <return-statm>
	22:       }
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <number>
	23:       s[i] = c;   i = i+1;
Parser:                                     </number>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </return-statm>
Parser:                       </statement>
Parser:                     </statm list>
Parser:                   </if-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
	24:    }
Parser:                           </term opr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	25: }
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
	26: 
	27: /* Printing routines: */
Parser:                   </assign-statm>
Parser:                 </statement>
	28: 
	29: int p1 (int c1) { putchar(c1); }
Parser:               </statm list>
Parser:             </while-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	30: int p2 (int c1, int c2) { p1(c1); p1(c2); }
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	31: int p3 (int c1, int c2, int c3) { p2(c1,c2); p1(c3); }
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	32: int p4 (int c1, int c2, int c3, int c4) { p3(c1,c2,c3); p1(c4); }
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	33: int p12 (int c1, int c2, int c3, int c4, int c5, int c6, 
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
	34:   int c7, int c8, int c9, int c10, int c11, int c12) 
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
	35: {
	36:     p4(c1,c2,c3,c4);  p4(c5,c6,c7,c8);  p4(c9,c10,c11,c12);
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
Parser:                   <expression>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <variable>
	37: }
Parser:                             </variable>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </expression>
	38: 
	39: int my_puts (int *s)
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
	40: {
Parser:       </type>
Parser:       <param decl>
	41:    int i;  int c;
Parser:       </param decl>
Parser:       <func body>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	42: 
Parser:         </var decl>
Parser:         <type>
	43:    i = 0;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
	44:    while (s[i]) {
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <while-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
	45:       c = s[i];  i = i+1;  p1(c);
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                   <expression>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </expression>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
	46:    }
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
	47: }
Parser:                       </expr list>
Parser:                     </function call>
	48: 
	49: /* Utility functions */
Parser:                   </call-statm>
Parser:                 </statement>
	50: 
	51: int my_strlen (int *s)     /* How long is the text string? */
Parser:               </statm list>
Parser:             </while-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
	52: {
	53:    int i;
Parser:       </param decl>
Parser:       <func body>
	54: 
Parser:         <type>
	55:    i = 0;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
	56:    while (s[i]) { i = i+1; }
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <while-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <variable>
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	57:    return i;
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </while-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <return-statm>
	58: }
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
	59: 
	60: int is_palindrome (int *s)  /* Is the text string a palindrome? */
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:             </return-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
Parser:       <type>
Parser:       </type>
Parser:       <param decl>
	61: {
	62:    int i1;  int i2;
Parser:       </param decl>
Parser:       <func body>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	63: 
Parser:         </var decl>
Parser:         <type>
	64:    i1 = 0;  i2 = my_strlen(s) - 1;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <variable>
Parser:                                         </variable>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                     <term opr>
	65:    while (i1 < i2) {
Parser:                     </term opr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <primary>
Parser:                           <operand>
Parser:                             <number>
Parser:                             </number>
Parser:                           </operand>
Parser:                         </primary>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <while-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:                 <rel opr>
Parser:                 </rel opr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
	66:       if (s[i1] != s[i2]) { return false; }
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <if-statm>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
Parser:                                 <expression>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <primary>
Parser:                                         <operand>
Parser:                                           <variable>
Parser:                                           </variable>
Parser:                                         </operand>
Parser:                                       </primary>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </expression>
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <return-statm>
Parser:                           <expression>
Parser:                             <term>
Parser:                               <factor>
Parser:                                 <primary>
Parser:                                   <operand>
Parser:                                     <variable>
	67:       i1 = i1 + 1;  i2 = i2 - 1;
Parser:                                     </variable>
Parser:                                   </operand>
Parser:                                 </primary>
Parser:                               </factor>
Parser:                             </term>
Parser:                           </expression>
Parser:                         </return-statm>
Parser:                       </statement>
Parser:                     </statm list>
Parser:                   </if-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
Parser:                           </term opr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                           <term opr>
	68:    }
Parser:                           </term opr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	69:    return true;
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </while-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <return-statm>
	70: }
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
	71: 
	72: /* The main program: */
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
	73: 
	74: int main ()
Parser:             </return-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:     <type>
Parser:     </type>
Parser:     <func decl>
	75: {
	76:    int s1[201];
Parser:       <func body>
Parser:         <type>
Parser:         </type>
Parser:         <var decl>
	77:    int no_p;
	78: 
Parser:         </var decl>
Parser:         <type>
	79:    false = 0;  true = 1;  LF = 10;
Parser:         </type>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
Parser:                   </variable>
Parser:                 </lhs-variable>
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <lhs-variable>
Parser:                   <variable>
	80: 
Parser:                   </variable>
Parser:                 </lhs-variable>
	81:    while (true) {
Parser:                 <expression>
Parser:                   <term>
Parser:                     <factor>
Parser:                       <primary>
Parser:                         <operand>
Parser:                           <number>
Parser:                           </number>
Parser:                         </operand>
Parser:                       </primary>
Parser:                     </factor>
Parser:                   </term>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <while-statm>
Parser:               <expression>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <primary>
Parser:                       <operand>
Parser:                         <variable>
	82:       p2('?', ' ');  my_gets(s1);
Parser:                         </variable>
Parser:                       </operand>
Parser:                     </primary>
Parser:                   </factor>
Parser:                 </term>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
	83:       if (my_strlen(s1) == 0) { exit(0); }
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <if-statm>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <function call>
Parser:                                 <expr list>
Parser:                                   <expression>
Parser:                                     <term>
Parser:                                       <factor>
Parser:                                         <primary>
Parser:                                           <operand>
Parser:                                             <variable>
Parser:                                             </variable>
Parser:                                           </operand>
Parser:                                         </primary>
Parser:                                       </factor>
Parser:                                     </term>
Parser:                                   </expression>
Parser:                                 </expr list>
Parser:                               </function call>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                       <rel opr>
Parser:                       </rel opr>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <number>
Parser:                               </number>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <call-statm>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
	84: 
	85:       p1(''');  my_puts(s1);  p2(''', ' ');  p3('i','s',' ');
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </call-statm>
Parser:                       </statement>
Parser:                     </statm list>
Parser:                   </if-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
	86:       no_p = is_palindrome(s1) == 0;
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign-statm>
Parser:                     <assignment>
Parser:                       <lhs-variable>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </lhs-variable>
Parser:                       <expression>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <function call>
Parser:                                   <expr list>
Parser:                                     <expression>
Parser:                                       <term>
Parser:                                         <factor>
Parser:                                           <primary>
Parser:                                             <operand>
Parser:                                               <variable>
Parser:                                               </variable>
Parser:                                             </operand>
Parser:                                           </primary>
Parser:                                         </factor>
Parser:                                       </term>
Parser:                                     </expression>
Parser:                                   </expr list>
Parser:                                 </function call>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                         <rel opr>
	87:       if (no_p) {
Parser:                         </rel opr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <primary>
Parser:                               <operand>
Parser:                                 <number>
Parser:                                 </number>
Parser:                               </operand>
Parser:                             </primary>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </expression>
Parser:                     </assignment>
Parser:                   </assign-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <if-statm>
Parser:                     <expression>
Parser:                       <term>
Parser:                         <factor>
Parser:                           <primary>
Parser:                             <operand>
Parser:                               <variable>
	88: 	 p3('n','o',' ');
Parser:                               </variable>
Parser:                             </operand>
Parser:                           </primary>
Parser:                         </factor>
Parser:                       </term>
Parser:                     </expression>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <call-statm>
Parser:                           <function call>
Parser:                             <expr list>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <term>
Parser:                                   <factor>
Parser:                                     <primary>
Parser:                                       <operand>
Parser:                                         <number>
	89:       }
Parser:                                         </number>
Parser:                                       </operand>
Parser:                                     </primary>
Parser:                                   </factor>
Parser:                                 </term>
Parser:                               </expression>
	90:       p12('p','a','l','i','n','d','r','o','m','e','.',LF);
Parser:                             </expr list>
Parser:                           </function call>
Parser:                         </call-statm>
Parser:                       </statement>
Parser:                     </statm list>
Parser:                   </if-statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <call-statm>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <number>
Parser:                                   </number>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <primary>
Parser:                                 <operand>
Parser:                                   <variable>
	91:    }
Parser:                                   </variable>
Parser:                                 </operand>
Parser:                               </primary>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </expression>
	92: }
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </call-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </while-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func delc>
Parser:   </program>
Tree:     int true;
Tree:     int false;
Tree:     int LF;
Tree:     int my_gets(int* s){
Tree:       int i;
Tree:       int c;
Tree:       i=0;
Tree:       while (true) {
Tree:         c=getchar();
Tree:         if (c == LF) {
Tree:           s[i]=0;
Tree:           return 0;}
Tree:         s[i]=c;
Tree:         i=i + 1;
Tree:       }
Tree:       
Tree:     }
Tree:     int p1(int c1){
Tree:       putchar(c1);
Tree:       
Tree:     }
Tree:     int p2(int c1, int c2){
Tree:       p1(c1);
Tree:       p1(c2);
Tree:       
Tree:     }
Tree:     int p3(int c1, int c2, int c3){
Tree:       p2(c1, c2);
Tree:       p1(c3);
Tree:       
Tree:     }
Tree:     int p4(int c1, int c2, int c3, int c4){
Tree:       p3(c1, c2, c3);
Tree:       p1(c4);
Tree:       
Tree:     }
Tree:     int p12(int c1, int c2, int c3, int c4, int c5, int c6, int c7, int c8, int c9, int c10, int c11, int c12){
Tree:       p4(c1, c2, c3, c4);
Tree:       p4(c5, c6, c7, c8);
Tree:       p4(c9, c10, c11, c12);
Tree:       
Tree:     }
Tree:     int my_puts(int* s){
Tree:       int i;
Tree:       int c;
Tree:       i=0;
Tree:       while (s[i]) {
Tree:         c=s[i];
Tree:         i=i + 1;
Tree:         p1(c);
Tree:       }
Tree:       
Tree:     }
Tree:     int my_strlen(int* s){
Tree:       int i;
Tree:       i=0;
Tree:       while (s[i]) {
Tree:         i=i + 1;
Tree:       }
Tree:       return i;
Tree:     }
Tree:     int is_palindrome(int* s){
Tree:       int i1;
Tree:       int i2;
Tree:       i1=0;
Tree:       i2=my_strlen(s) - 1;
Tree:       while (i1 < i2) {
Tree:         if (s[i1] != s[i2]) {
Tree:           return false;}
Tree:         i1=i1 + 1;
Tree:         i2=i2 - 1;
Tree:       }
Tree:       return true;
Tree:     }
Tree:     int main(){
Tree:       int s1;
Tree:       int no_p;
Tree:       false=0;
Tree:       true=1;
Tree:       LF=10;
Tree:       while (true) {
Tree:         p2(63, 32);
Tree:         my_gets(s1);
Tree:         if (my_strlen(s1) == 0) {
Tree:           exit(0);
Tree:           }
Tree:         p1(39);
Tree:         my_puts(s1);
Tree:         p2(39, 32);
Tree:         p3(105, 115, 32);
Tree:         no_p=is_palindrome(s1) == 0;
Tree:         if (no_p) {
Tree:           p3(110, 111, 32);
Tree:           }
Tree:         p12(112, 97, 108, 105, 110, 100, 114, 111, 109, 101, 46, LF);
Tree:       }
Tree:       
Tree:     }
